import org.jivesoftware.smack.AbstractXMPPConnection;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.tcp.XMPPTCPConnection;
import org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration;
import org.jivesoftware.smackx.iqregister.AccountManager;
import org.jxmpp.jid.parts.Localpart;

import java.util.UUID;
import java.util.concurrent.TimeUnit;

public class PenTest {

    public PenTest(String dominio, int cantACrear){
        long startTime = System.currentTimeMillis();

        XMPPTCPConnectionConfiguration config = null;
        AbstractXMPPConnection con = null;
        int cuentasCreadas = 0;
        String  randomUUID = "",
                idRandom = "000";

            try {
                config = XMPPTCPConnectionConfiguration.builder()
                        .setXmppDomain(dominio)
                        .setHost(dominio)
                        .setDebuggerEnabled(false)
                        .setSecurityMode(ConnectionConfiguration.SecurityMode.disabled)
                        .build();

                con = new XMPPTCPConnection(config);
                con.connect();
                System.out.println("Connected to " + con.getHost());

                for (int i = 0 ; i < cantACrear ; i++) {
                    randomUUID = UUID.randomUUID().toString();
                    randomUUID = idRandom + randomUUID;

                    AccountManager ac = AccountManager.getInstance(con);

                    ac.sensitiveOperationOverInsecureConnection(true);
                    ac.createAccount(Localpart.from(randomUUID), randomUUID);

                    System.out.println("######### USUARIO CREADO #########\n#\tusuario: " + randomUUID + "\n#\tcontraseÃ±a: " + randomUUID + "\n#################################");
                    cuentasCreadas++;
                }



            } catch (Exception e){
                System.out.println("ERROR");

            }

            if (con.isConnected())
                con.disconnect();

        long endTime   = System.currentTimeMillis();
        long totalTime = endTime - startTime;
        System.out.println("\tCuentas creadas:" + cuentasCreadas + "\n\tTiempo total: " + TimeUnit.MILLISECONDS.toSeconds(totalTime) + "segundos");
    }

}
